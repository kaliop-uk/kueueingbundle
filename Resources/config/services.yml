parameters:
    kaliop_queueing.drivermanager.class: Kaliop\QueueingBundle\Adapter\DriverManager
    kaliop_queueing.driver.rabbitmq.class: Kaliop\QueueingBundle\Adapter\RabbitMq\Driver
    kaliop_queueing.worker_manager.class: Kaliop\QueueingBundle\Service\WorkerManager
    kaliop_queueing.watchdog.class: Kaliop\QueueingBundle\Helper\Watchdog
    kaliop_queueing.event_dispatcher.class: Kaliop\QueueingBundle\Service\EventDispatcher
    kaliop_queueing.console_event_listener.class: Kaliop\QueueingBundle\Service\ConsoleEventListener

    kaliop_queueing.message_producer.class: Kaliop\QueueingBundle\Service\MessageProducer
    kaliop_queueing.message_consumer.class: Kaliop\QueueingBundle\Service\MessageConsumer

    kaliop_queueing.message_producer.generic_message.class: Kaliop\QueueingBundle\Service\MessageProducer\GenericMessage

    kaliop_queueing.message_producer.console_command.class: Kaliop\QueueingBundle\Service\MessageProducer\ConsoleCommand
    kaliop_queueing.message_consumer.console_command.class: Kaliop\QueueingBundle\Service\MessageConsumer\ConsoleCommand
    kaliop_queueing.message_consumer.console_command.filter.class: Kaliop\QueueingBundle\Service\MessageConsumer\EventListener\ConsoleCommandFilter

    kaliop_queueing.message_consumer.inprocess_console_command.class: Kaliop\QueueingBundle\Service\MessageConsumer\InProcessConsoleCommand

    kaliop_queueing.message_producer.symfony_service.class: Kaliop\QueueingBundle\Service\MessageProducer\SymfonyService
    kaliop_queueing.message_consumer.symfony_service.class: Kaliop\QueueingBundle\Service\MessageConsumer\SymfonyService
    kaliop_queueing.message_consumer.symfony_service.filter.class: Kaliop\QueueingBundle\Service\MessageConsumer\EventListener\SymfonyServiceFilter

    kaliop_queueing.message_producer.http_request.class: Kaliop\QueueingBundle\Service\MessageProducer\HTTPRequest
    kaliop_queueing.message_consumer.http_request.class: Kaliop\QueueingBundle\Service\MessageConsumer\HTTPRequest
    kaliop_queueing.message_consumer.http_request.filter.class: Kaliop\QueueingBundle\Service\MessageConsumer\EventListener\HTTPRequestFilter

    kaliop_queueing.message_producer.xmlrpc_call.class: Kaliop\QueueingBundle\Service\MessageProducer\XmlrpcCall
    kaliop_queueing.message_consumer.xmlrpc_call.class: Kaliop\QueueingBundle\Service\MessageConsumer\XmlrpcCall

    kaliop_queueing.amqp.queue_manager.class: Kaliop\QueueingBundle\Adapter\RabbitMq\QueueManager

    kaliop_queueing.message_consumer.noop.class: Kaliop\QueueingBundle\Service\MessageConsumer\Noop

    kaliop_queueing.message_consumer.filter.monitor.class: Kaliop\QueueingBundle\Service\MessageConsumer\EventListener\Monitor
    kaliop_queueing.message_consumer.filter.stopwatch.class: Kaliop\QueueingBundle\Service\MessageConsumer\EventListener\StopwatchFilter
    kaliop_queueing.message_consumer.filter.accumulator.class: Kaliop\QueueingBundle\Service\MessageConsumer\EventListener\Accumulator
    kaliop_queueing.message_consumer.filter.equeue_failed_consolecommands.class: Kaliop\QueueingBundle\Service\MessageConsumer\EventListener\RequeueFailedConsoleCommandsFilter

services:

    kaliop_queueing.drivermanager:
        class: '%kaliop_queueing.drivermanager.class%'
        arguments: [ '@service_container' ]
        calls:
            - [ setDefaultDriver, [ '%kaliop_queueing.default.driver%' ] ]
        public: true

    kaliop_queueing.driver.rabbitmq:
        class: '%kaliop_queueing.driver.rabbitmq.class%'
        calls:
            - [ setContainer, [ '@service_container' ] ]
            - [ setQueueManager, [ '@kaliop_queueing.amqp.queue_manager' ] ]
        tags:
            - { name: kaliop_queueing.driver, alias: rabbitmq }
        public: true

    kaliop_queueing.event_dispatcher:
        class: '%kaliop_queueing.event_dispatcher.class%'
        arguments: [ '@service_container' ]

    kaliop_queueing.worker_manager:
         class: '%kaliop_queueing.worker_manager.class%'
         arguments: [ '%kaliop_queueing.default.workers.list%', '%kernel.root_dir%' ]
         public: true

    kaliop_queueing.watchdog:
        class: '%kaliop_queueing.watchdog.class%'
        arguments: [ '@kaliop_queueing.event_dispatcher' ]
        public: true

    # Produces messages used to manage the queues themselves.
    kaliop_queueing.amqp.queue_manager:
        class: '%kaliop_queueing.amqp.queue_manager.class%'
        calls:
            - [ setContainer, [ '@service_container' ] ]

    # An event listener used to get a hook into the currently running Application
    kaliop_queueing.console_event_listener:
        class: '%kaliop_queueing.console_event_listener.class%'
        tags:
            - { name: kernel.event_listener, event: console.command, method: onConsoleCommand }
        public: true

    ### Producers ###

    # The base service - mapped to an abstract class
    kaliop_queueing.message_producer:
        class: '%kaliop_queueing.message_producer.class%'
        # nb: we assign by default no driver to the producer, otherwise it would look like the following:
        #arguments: [ '@kaliop_queueing.driver.rabbitmq' ]
        # nb: we assign by default no queue to this service, otherwise it would look like the following:
        #calls: [ setQueueName, [ queue_name ] ]
        calls:
            - [ setDispatcher, [ '@kaliop_queueing.event_dispatcher' ] ]

    # Produces 'generic' messages - message encoding is left to the application
    kaliop_queueing.message_producer.generic_message:
        class: '%kaliop_queueing.message_producer.generic_message.class%'
        parent: kaliop_queueing.message_producer

    # Produces messages used to distribute execution of Sf console commands
    kaliop_queueing.message_producer.console_command:
        class: '%kaliop_queueing.message_producer.console_command.class%'
        parent: kaliop_queueing.message_producer
        public: true

    # Produces messages used to distribute execution of Sf services methods
    kaliop_queueing.message_producer.symfony_service:
        class: '%kaliop_queueing.message_producer.symfony_service.class%'
        parent: kaliop_queueing.message_producer

    # Produces messages used to distribute execution of http requests
    kaliop_queueing.message_producer.http_request:
        class: '%kaliop_queueing.message_producer.http_request.class%'
        parent: kaliop_queueing.message_producer

    # Produces messages used to distribute execution of xmlrpc calls
    kaliop_queueing.message_producer.xmlrpc_call:
        class: '%kaliop_queueing.message_producer.xmlrpc_call.class%'
        parent: kaliop_queueing.message_producer

    ### Consumers ###

    # The base service - mapped to an abstract class
    # All the services which are tagged 'kaliop_queueing.driver' get registered automatically.
    kaliop_queueing.message_consumer:
        class: '%kaliop_queueing.message_consumer.class%'
        calls:
            - [ setLogger, [ '@?logger' ] ]
            - [ setDispatcher, [ '@kaliop_queueing.event_dispatcher' ] ]
            - [ setDriverManager, [ '@kaliop_queueing.drivermanager' ] ]
        tags:
            - { name: monolog.logger, channel: kaliop_queueing }

    # Executes Sf console commands
    kaliop_queueing.message_consumer.console_command:
        class: '%kaliop_queueing.message_consumer.console_command.class%'
        arguments: [ '@kaliop_queueing.worker_manager' ]
        calls:
            - [ setForceSigChildEnabled, [ '%kaliop_queueing.default.console_commands.force_sigchild_enabled%' ] ]
        parent: kaliop_queueing.message_consumer

    # Executes Sf console commands without spawning new processes
    kaliop_queueing.message_consumer.inprocess_console_command:
        class: '%kaliop_queueing.message_consumer.inprocess_console_command.class%'
        calls:
            - [ setEventListener, [ '@kaliop_queueing.console_event_listener' ] ]
        parent: kaliop_queueing.message_consumer.console_command

    # Executes Sf services methods
    kaliop_queueing.message_consumer.symfony_service:
        class: '%kaliop_queueing.message_consumer.symfony_service.class%'
        arguments: [ '@service_container' ]
        parent: kaliop_queueing.message_consumer

    # Executes http requests
    kaliop_queueing.message_consumer.http_request:
        class: '%kaliop_queueing.message_consumer.http_request.class%'
        arguments: [ '@service_container' ]
        parent: kaliop_queueing.message_consumer

    # Executes xmlrpc calls
    kaliop_queueing.message_consumer.xmlrpc_call:
        class: '%kaliop_queueing.message_consumer.xmlrpc_call.class%'
        parent: kaliop_queueing.message_consumer

    # A 'do nothing' consumer. Useful for testing/development
    kaliop_queueing.message_consumer.noop:
        class: '%kaliop_queueing.message_consumer.noop.class%'
        parent: kaliop_queueing.message_consumer

    ### Filters ###

    # NB: all of the filters tagged as 'kaliop_queueing.event_listener' can be set to run on all queues or just a single
    # queue.
    # In order to set up a filter on a single queue, use the following syntax:
    # Tags:
    #     - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_received, queue: aQueueName }

    # A filter used to limit which Sf console commands can be execute via queue messages
    kaliop_queueing.message_consumer.console_command.filter:
        class: '%kaliop_queueing.message_consumer.console_command.filter.class%'
        arguments: [ '%kaliop_queueing.default.allowed_commands%' ]
        tags:
             - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_received }
        public: true

    # A filter used to limit which Sf services methods can be execute via queue messages
    kaliop_queueing.message_consumer.symfony_service.filter:
        class: '%kaliop_queueing.message_consumer.symfony_service.filter.class%'
        arguments: [ '%kaliop_queueing.default.allowed_services%' ]
        tags:
             - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_received }
        public: true

    # A filter used to limit which remote servers can be contacted
    kaliop_queueing.message_consumer.http_request.filter:
        class: '%kaliop_queueing.message_consumer.http_request.filter.class%'
        arguments: [ '%kaliop_queueing.default.allowed_services%' ]
        tags:
             - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_received }
        public: true

    # A filter used to re-queue the execution of console command when they fail.
    # It has to be hooked up to a message producer service (see e.g. the ones defined above),
    # and can be limited to a single queue, specified in the tag
    #kaliop_queueing.message_consumer.filter.requeue_failed_consolecommands:
    #    class: '%kaliop_queueing.message_consumer.filter.equeue_failed_consolecommands.class%
    #    arguments: [ '@kaliop_queueing.message_producer.console_command' ]
    #    tags:
    #        - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_consumption_failed, queue: aqueue }

    # You can enable this filter to get debug info of received messages - by uncommenting the 1st tag, as well as
    # info on the results of message consumption, by uncommenting the 2nd and 3rd tags
    # NB: this slows down considerably the message receiving, enable (tag it) only during development
    kaliop_queueing.message_consumer.filter.monitor:
        class: '%kaliop_queueing.message_consumer.filter.monitor.class%'
        #tags:
        #     - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_received }
        #     - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_consumed }
        #     - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_consumption_failed }
        public: true

    # A filter used to time message consumption. Enable it (uncomment the tag) for testing/development
    kaliop_queueing.message_consumer.filter.stopwatch:
        class: '%kaliop_queueing.message_consumer.filter.stopwatch.class%'
        # the stopwatch will measure the time taken to process this many messages
        arguments: [ 10 ]
        #tags:
        #     - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_received }
        public: true

    # A filter used to debug the results of message consumption. Enable it (uncomment the tag) for testing/development
    kaliop_queueing.message_consumer.filter.accumulator:
        class: '%kaliop_queueing.message_consumer.filter.accumulator.class%'
        #tags:
        #     - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_consumed }
        public: true
